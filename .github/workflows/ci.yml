name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  lint:
    name: fmt + clippy (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check
      - run: cargo clippy --workspace --all-targets --all-features --no-deps

  test-linux:
    name: tests (Linux only)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Build (debug)
        run: cargo build --workspace --all-features
      - name: Unit tests
        run: cargo nextest run --workspace --all-features --no-capture

  interop-linux:
    name: interop smoke (Linux only)
    runs-on: ubuntu-latest
    needs: [test-linux]
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --release --bins
      - name: Install system rsync
        run: sudo apt-get update && sudo apt-get install -y rsync
      - name: oc-rsync → rsync.samba.org
        run: ./target/release/oc-rsync rsync://rsync.samba.org/
      - name: rsync (system) → oc-rsyncd (local)
        shell: bash
        run: |
          set -euo pipefail
          work="${RUNNER_TEMP}/interop"
          mkdir -p "${work}/module" "${work}/dst"
          printf "hello\n" > "${work}/module/hello.txt"
          cat > "${work}/oc-rsyncd.conf" <<'CONF'
          pid file = oc-rsyncd.pid
          use chroot = no
          [mod]
              path = REPLACE_PATH
              read only = false
          CONF
          sed -i "s#REPLACE_PATH#${work}/module#g" "${work}/oc-rsyncd.conf"
          ./target/release/oc-rsyncd --config "${work}/oc-rsyncd.conf" --port 8730 &
          srv_pid=$!
          trap "kill ${srv_pid} || true" EXIT
          sleep 1
          rsync rsync://127.0.0.1:8730/mod/hello.txt "${work}/dst/hello.txt"
          diff -u "${work}/module/hello.txt" "${work}/dst/hello.txt"

  build-all-platforms:
    # Build on all platforms, no tests.
    name: build ${{ matrix.target }}
    needs: [lint]  # compile may start once lint passes
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (static MUSL via zigbuild)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_zig: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_zig: true
          # macOS (native)
          - os: macos-13
            target: x86_64-apple-darwin
            use_zig: false
          - os: macos-14
            target: aarch64-apple-darwin
            use_zig: false
          # Windows (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_zig: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
      - name: Install Zig & cargo-zigbuild (Linux-musl only)
        if: matrix.use_zig == true
        shell: bash
        run: |
          set -euo pipefail
          cargo install cargo-zigbuild --locked
      - name: Build (release, no tests)
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ matrix.use_zig }}" == "true" ]]; then
            cargo zigbuild --release --target "${{ matrix.target }}" --bins
          else
            cargo build --release --target "${{ matrix.target }}" --bins
          fi
