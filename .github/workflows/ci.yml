name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUSTDOCFLAGS: -Dwarnings -Drustdoc::broken_intra_doc_links
  LC_ALL: C
  TZ: UTC
  COLUMNS: 80

jobs:
  no-binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure no binary files are tracked
        run: |
          if git ls-files -z | xargs -0 file --mime | grep -vE 'text/|application/json'; then
            echo "Binary files detected" >&2
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: clippy,rustfmt
          cache: true
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lint-
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Lint with clippy
        run: cargo clippy --workspace --all-targets -- -Dwarnings
      - name: Build documentation
        run: cargo doc --workspace --no-deps
      - name: Run doctests
        run: cargo test --doc --workspace
      - name: Ensure no placeholders remain
        run: bash tools/no_placeholders.sh

  test-linux:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup Rust (1.87 + llvm-tools)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: llvm-tools-preview,clippy,rustfmt
          cache: true

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev libpopt-dev libxxhash-dev attr acl

      - name: Pre-flight check
        run: cargo run -p xtask -- preflight

      - name: Install cargo-llvm-cov
        id: install_llvm_cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Install cargo-nextest
        id: install_nextest
        run: cargo install cargo-nextest --locked

      - name: Run tests
        if: steps.install_nextest.outcome == 'success'
        run: cargo nextest run --workspace --no-fail-fast
      - name: Run tests (extended features)
        if: steps.install_nextest.outcome == 'success'
        run: cargo nextest run --workspace --no-fail-fast --features "cli nightly"
      - name: Run CLI version tests without ACL/iconv support
        if: steps.install_nextest.outcome == 'success'
        run: cargo test -p rsync-cli --test version --no-default-features --features "xattr zlib zstd"
      - name: Test with coverage (95% lines & functions)
        if: steps.install_nextest.outcome == 'success' && steps.install_llvm_cov.outcome == 'success'
        run: |
          cargo llvm-cov nextest --workspace --features "cli nightly" \
            --fail-under-lines 95 --fail-under-functions 95 \
            --lcov --output-path coverage.lcov -- --no-fail-fast

      - name: Verify coverage file exists
        if: steps.install_nextest.outcome == 'success' && steps.install_llvm_cov.outcome == 'success'
        run: ls -l coverage.lcov

      - name: Upload coverage artifact
        if: steps.install_nextest.outcome == 'success' && steps.install_llvm_cov.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage.lcov
  interop:
    needs: test-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: llvm-tools-preview
          cache: true
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-test-
      - name: Run tests (all features)
        run: cargo test --workspace --all-features

  build-matrix:
    needs: test-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            builder: native
            bins: "oc-rsync oc-rsyncd"
          - name: linux-aarch64
            target: aarch64-unknown-linux-gnu
            builder: native
            bins: "oc-rsync oc-rsyncd"
          - name: darwin-x86_64
            target: x86_64-apple-darwin
            builder: zig
            bins: "oc-rsync oc-rsyncd"
          - name: darwin-aarch64
            target: aarch64-apple-darwin
            builder: zig
            bins: "oc-rsync oc-rsyncd"
          - name: windows-x86_64
            target: x86_64-pc-windows-gnu
            builder: zig
            bins: "oc-rsync"
          - name: windows-x86
            target: i686-pc-windows-gnu
            builder: zig
            bins: "oc-rsync"
          - name: windows-aarch64
            target: aarch64-pc-windows-gnu
            builder: zig
            bins: "oc-rsync"
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          target: ${{ matrix.target }}
          cache: true
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
          fi
      - name: Install Zig toolchain
        if: ${{ matrix.builder == 'zig' }}
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild
        if: ${{ matrix.builder == 'zig' }}
        run: cargo install cargo-zigbuild --locked

      - name: Build release binaries
        shell: bash
        run: |
          set -euo pipefail
          read -r -a bins <<< "${{ matrix.bins }}"
          for bin in "${bins[@]}"; do
            if [[ "${{ matrix.builder }}" == "zig" ]]; then
              cargo zigbuild --release --target "${{ matrix.target }}" --bin "$bin"
            else
              cargo build --release --target "${{ matrix.target }}" --bin "$bin"
            fi
          done

      - name: Package artifacts
        shell: bash
        run: |
          set -euo pipefail
          read -r -a bins <<< "${{ matrix.bins }}"
          ext=""
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            ext=".exe"
          fi

          base_dir="dist/${{ matrix.name }}"
          mkdir -p "$base_dir"

          for bin in "${bins[@]}"; do
            src="target/${{ matrix.target }}/release/${bin}${ext}"
            dest="$base_dir/${bin}${ext}"
            cp "$src" "$dest"
          done

          if [[ "${{ matrix.target }}" != *"windows"* ]]; then
            cargo install cyclonedx-rust-cargo || true
            cyclonedx-rust-cargo --output "$base_dir/oc-rsync-${{ matrix.name }}-sbom.json"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.name }}
          path: dist/${{ matrix.name }}

  package-linux:
    needs: [test-linux, build-matrix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev

      - name: Install packaging tools
        run: cargo install cargo-deb cargo-rpm || true

      - name: Install cyclonedx-rust-cargo
        run: cargo install cyclonedx-rust-cargo || true

      - name: Display workspace metadata
        run: cargo metadata --format-version 1 --no-deps | jq '.workspace_metadata.oc_rsync'

      - name: Build packages
        run: |
          cargo deb -p oc-rsync-bin
          cargo rpm build --release

      - name: Generate SBOM
        run: |
          mkdir -p target/sbom
          cyclonedx-rust-cargo --output target/sbom/oc-rsync.cdx.json

      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-packages
          path: |
            target/release/oc-rsync*
            target/release/oc-rsyncd*
            target/debian/*.deb
            target/release/rpmbuild/RPMS/**/*.rpm
