name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -Dwarnings
  RUSTDOCFLAGS: -Dwarnings -Drustdoc::broken_intra_doc_links
  LC_ALL: C
  TZ: UTC
  COLUMNS: 80

jobs:
  no-binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: no-binaries

      - name: Audit repository for tracked binary artifacts
        run: cargo --locked run -p xtask -- no-binaries

  readme-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: readme-version

      - name: Verify README version alignment
        run: cargo --locked run -p xtask -- readme-version

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: clippy,rustfmt
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: lint

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
          version: 1

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint with clippy
        run: cargo clippy --workspace --all-targets --all-features --locked -- -Dwarnings

      - name: Enforce line count limits
        run: cargo --locked run -p xtask -- enforce-limits

      - name: Build and validate documentation
        run: cargo --locked run -p xtask -- docs --validate

      - name: Ensure no placeholders remain
        run: cargo --locked run -p xtask -- no-placeholders

  test-linux:
    needs: [lint, readme-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87 + llvm-tools)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: llvm-tools-preview,clippy,rustfmt
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: linux-tests

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev libpopt-dev libxxhash-dev attr acl
          version: 1

      - name: Pre-flight check
        run: cargo --locked run -p xtask -- preflight

      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests
        run: cargo --locked nextest run --workspace

      - name: Run tests (extended features)
        run: cargo --locked nextest run --workspace --all-features

      - name: Test with coverage (95% lines & functions)
        run: cargo --locked llvm-cov nextest --workspace --all-features --lcov --output-path coverage.lcov

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage.lcov
          if-no-files-found: error

  interop:
    needs: test-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: llvm-tools-preview
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: interop

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
          version: 1

      - name: Run tests (all features)
        run: cargo --locked test --workspace --all-features

  cross-compile:
    needs: lint
    runs-on: ubuntu-latest
    name: Cross-compile (${{ matrix.platform.name }})
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        platform:
          - name: linux-x86_64
            target: x86_64-unknown-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: false
            generate_sbom: true
          - name: linux-aarch64
            target: aarch64-unknown-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: true
            generate_sbom: true
          - name: darwin-x86_64
            target: x86_64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: darwin-aarch64
            target: aarch64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: windows-x86_64
            target: x86_64-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
          - name: windows-aarch64
            target: aarch64-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
          - name: windows-x86
            target: i686-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
    env:
      CC_aarch64_unknown_linux_gnu: ${{ matrix.platform.needs_cross_gcc && 'aarch64-linux-gnu-gcc' || '' }}
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.platform.needs_cross_gcc && 'aarch64-linux-gnu-gcc' || '' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - name: Install Rust target
        id: install-target
        run: |
          if rustup target list --installed | grep -q '^${{ matrix.platform.target }}$'; then
            echo "unsupported=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if rustup target add ${{ matrix.platform.target }}; then
            echo "unsupported=false" >> "$GITHUB_OUTPUT"
          else
            echo "unsupported=true" >> "$GITHUB_OUTPUT"
            echo "::warning::Rust target '${{ matrix.platform.target }}' is unavailable on $(rustc --version). Skipping build steps."
          fi

      - name: Note skipped target
        if: steps.install-target.outputs.unsupported == 'true'
        run: echo "Target ${{ matrix.platform.target }} is not available for the current toolchain; cross-compile job will exit early."

      - uses: Swatinem/rust-cache@v2
        if: steps.install-target.outputs.unsupported != 'true'
        with:
          shared-key: cross-${{ matrix.platform.name }}
          target: ${{ matrix.platform.target }}

      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: steps.install-target.outputs.unsupported != 'true'
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
          version: 1

      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: matrix.platform.needs_cross_gcc && steps.install-target.outputs.unsupported != 'true'
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1

      - name: Install Zig toolchain
        if: matrix.platform.uses_zig && steps.install-target.outputs.unsupported != 'true'
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        if: matrix.platform.uses_zig && steps.install-target.outputs.unsupported != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: Install cargo-cyclonedx
        if: matrix.platform.generate_sbom && steps.install-target.outputs.unsupported != 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Build oc-rsync
        if: steps.install-target.outputs.unsupported != 'true'
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsync

      - name: Build oc-rsyncd
        if: matrix.platform.build_daemon && steps.install-target.outputs.unsupported != 'true'
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsyncd

      - name: Generate target SBOM
        if: matrix.platform.generate_sbom && steps.install-target.outputs.unsupported != 'true'
        run: cargo --locked run -p xtask -- sbom --output target/${{ matrix.platform.target }}/release/oc-rsync-${{ matrix.platform.name }}-sbom.json

      - name: Upload oc-rsync artifact
        if: steps.install-target.outputs.unsupported != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/oc-rsync*
          if-no-files-found: error

      - name: Upload oc-rsyncd artifact
        if: matrix.platform.build_daemon && steps.install-target.outputs.unsupported != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsyncd-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/oc-rsyncd*
          if-no-files-found: error

  package-linux:
    needs: [test-linux, cross-compile]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: package-linux

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev
          version: 1

      - name: Install cargo-deb
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deb

      - name: Install cargo-rpm
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-rpm

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Display workspace metadata
        run: cargo --locked run -p xtask -- branding

      - name: Build Debian package
        run: cargo --locked deb -p oc-rsync-bin

      - name: Build RPM package
        run: cargo --locked rpm build --release

      - name: Generate SBOM
        run: cargo --locked run -p xtask -- sbom

      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-packages
          path: |
            target/release/oc-rsync*
            target/release/oc-rsyncd*
            target/debian/*.deb
            target/release/rpmbuild/RPMS/**/*.rpm
            target/sbom/oc-rsync.cdx.json
          if-no-files-found: error
