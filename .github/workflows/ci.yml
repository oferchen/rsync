name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUSTDOCFLAGS: -Dwarnings -Drustdoc::broken_intra_doc_links
  LC_ALL: C
  TZ: UTC
  COLUMNS: 80

jobs:
  no-binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure no binary files are tracked
        run: |
          if git ls-files -z | xargs -0 file --mime | grep -vE 'text/|application/json'; then
            echo "Binary files detected" >&2
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: clippy,rustfmt
          cache: true
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lint-
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Lint with clippy
        run: cargo clippy --workspace --all-targets -- -Dwarnings
      - name: Build documentation
        run: cargo doc --workspace --no-deps
      - name: Run doctests
        run: cargo test --doc --workspace
      - name: Ensure no placeholders remain
        run: bash tools/no_placeholders.sh

  test-linux:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: llvm-tools-preview
          cache: true
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-test-
      - name: Run tests (all features)
        run: cargo test --workspace --all-features

  build-matrix:
    needs: test-linux
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - name: macos-x86_64
            os: macos-13
            target: x86_64-apple-darwin
          - name: macos-aarch64
            os: macos-14
            target: aarch64-apple-darwin
          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          target: ${{ matrix.target }}
          cache: true
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
          fi
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-build-
      - name: Build release binaries
        shell: bash
        run: |
          set -euo pipefail
          cargo build --release --target ${{ matrix.target }} -p oc-rsync-bin
          cargo build --release --target ${{ matrix.target }} -p oc-rsyncd-bin
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.name }}
          path: |
            target/${{ matrix.target }}/release/oc-rsync*
            target/${{ matrix.target }}/release/oc-rsyncd*
