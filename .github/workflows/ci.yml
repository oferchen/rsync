name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  lint:
    name: fmt + clippy (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check
      - run: cargo clippy --workspace --all-targets --all-features --no-deps

  test-linux:
    name: tests (Linux only)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Optional, non-fatal sccache using local disk (no GHA backend)
      - uses: mozilla-actions/sccache-action@v0.0.4
        continue-on-error: true
      - name: Configure local sccache dir
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=false" >> "$GITHUB_ENV"
          echo "SCCACHE_DIR=$RUNNER_TEMP/.sccache" >> "$GITHUB_ENV"
      - name: Enable sccache wrapper if available (non-fatal)
        shell: bash
        run: |
          if command -v sccache >/dev/null 2>&1; then
            sccache --start-server || true
            echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
            sccache --show-stats || true
          fi

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Build (debug)
        run: cargo build --workspace --all-features
      - name: Unit tests
        run: cargo nextest run --workspace --all-features --no-capture

  interop-linux:
    name: interop smoke (Linux only)
    runs-on: ubuntu-latest
    needs: [test-linux]
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Optional, non-fatal sccache using local disk (no GHA backend)
      - uses: mozilla-actions/sccache-action@v0.0.4
        continue-on-error: true
      - name: Configure local sccache dir
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=false" >> "$GITHUB_ENV"
          echo "SCCACHE_DIR=$RUNNER_TEMP/.sccache" >> "$GITHUB_ENV"
      - name: Enable sccache wrapper if available (non-fatal)
        shell: bash
        run: |
          if command -v sccache >/dev/null 2>&1; then
            sccache --start-server || true
            echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
            sccache --show-stats || true
          fi

      - uses: Swatinem/rust-cache@v2
      - run: cargo build --release --bins
      - name: Install system rsync
        run: sudo apt-get update && sudo apt-get install -y rsync
      # - name: oc-rsync → rsync.samba.org
      #   run: ./target/release/oc-rsync rsync://rsync.samba.org/
      - name: oc-rsync → download.samba.org (TLS/native)
        run: ./target/release/oc-rsync rsyncs://download.samba.org/
      - name: oc-rsync → download.samba.org:874 (TLS/native)
        run: ./target/release/oc-rsync rsyncs://download.samba.org:874/
      - name: oc-rsync → download.samba.org:874 (TLS/native, flag)
        run: ./target/release/oc-rsync --tls rsync://download.samba.org:874/
      - name: rsync (system) → oc-rsyncd (local)
        shell: bash
        run: |
          set -euo pipefail
          work="${RUNNER_TEMP}/interop"
          mkdir -p "${work}/module" "${work}/dst"
          printf "hello\n" > "${work}/module/hello.txt"
          cat > "${work}/oc-rsyncd.conf" <<'CONF'
          pid file = oc-rsyncd.pid
          use chroot = no
          [mod]
              path = REPLACE_PATH
              read only = false
          CONF
          sed -i "s#REPLACE_PATH#${work}/module#g" "${work}/oc-rsyncd.conf"
          ./target/release/oc-rsyncd --config "${work}/oc-rsyncd.conf" --port 8730 &
          srv_pid=$!
          trap "kill ${srv_pid} || true" EXIT
          sleep 1
          rsync rsync://127.0.0.1:8730/mod/hello.txt "${work}/dst/hello.txt"
          diff -u "${work}/module/hello.txt" "${work}/dst/hello.txt"

  cross-compile:
    # Compile on all supported platforms (no tests, no tar.gz here).
    name: build ${{ matrix.platform.name }} (${{ matrix.platform.target }})
    needs: [lint]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        platform:
          # Linux GNU
          - name: linux-x86_64
            enabled: true
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: false
            generate_sbom: true
          - name: linux-aarch64
            enabled: true
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: true
            generate_sbom: true
          # macOS native
          - name: darwin-x86_64
            enabled: true
            runner: macos-13
            target: x86_64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: darwin-aarch64
            enabled: true
            runner: macos-14
            target: aarch64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          # Windows GNU
          - name: windows-x86_64
            enabled: true
            runner: windows-latest
            target: x86_64-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
          # Windows placeholders (disabled for now)
          - name: windows-x86
            enabled: false
            runner: windows-latest
            target: i686-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
          - name: windows-aarch64
            enabled: false
            runner: windows-latest
            target: aarch64-pc-windows-msvc
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
    runs-on: ${{ matrix.platform.runner }}

    steps:
      - name: Skip disabled target
        if: ${{ !matrix.platform.enabled }}
        run: echo "Platform '${{ matrix.platform.name }}' is disabled."

      - uses: actions/checkout@v4
        if: ${{ matrix.platform.enabled }}

      - name: Setup Rust toolchain
        if: ${{ matrix.platform.enabled }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      # Optional, non-fatal sccache using local disk (no GHA backend)
      - uses: mozilla-actions/sccache-action@v0.0.4
        if: ${{ matrix.platform.enabled }}
        continue-on-error: true
      - name: Configure local sccache dir
        if: ${{ matrix.platform.enabled }}
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=false" >> "$GITHUB_ENV"
          echo "SCCACHE_DIR=$RUNNER_TEMP/.sccache" >> "$GITHUB_ENV"
      - name: Enable sccache wrapper if available (non-fatal)
        if: ${{ matrix.platform.enabled }}
        shell: bash
        run: |
          if command -v sccache >/dev/null 2>&1; then
            sccache --start-server || true
            echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
            sccache --show-stats || true
          fi

      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform.enabled }}
        with:
          shared-key: cross-${{ matrix.platform.name }}
          target: ${{ matrix.platform.target }}

      - name: Install Zig toolchain
        if: ${{ matrix.platform.enabled && matrix.platform.uses_zig }}
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.11.0

      - name: Install cargo-zigbuild
        if: ${{ matrix.platform.enabled && matrix.platform.uses_zig }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: Install Ubuntu build deps
        if: ${{ matrix.platform.enabled && startsWith(matrix.platform.runner, 'ubuntu') }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev rpm
          version: 1

      - name: Install cross GCC for aarch64 (Ubuntu)
        if: ${{ matrix.platform.enabled && startsWith(matrix.platform.runner, 'ubuntu') && matrix.platform.needs_cross_gcc }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1

      - name: Install cargo-cyclonedx (SBOM)
        if: ${{ matrix.platform.enabled && matrix.platform.generate_sbom }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Build oc-rsync
        if: ${{ matrix.platform.enabled }}
        shell: bash
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsync

      - name: Build oc-rsyncd
        if: ${{ matrix.platform.enabled && matrix.platform.build_daemon }}
        shell: bash
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsyncd

      - name: Generate target SBOM (best-effort)
        if: ${{ matrix.platform.enabled && matrix.platform.generate_sbom }}
        shell: bash
        run: |
          set -euo pipefail
          if cargo cyclonedx --help >/dev/null 2>&1; then
            cargo cyclonedx --format json --all-features \
              --output target/${{ matrix.platform.target }}/release/oc-rsync-${{ matrix.platform.name }}-sbom.json || true
          fi

      - name: Upload oc-rsync artifact
        if: ${{ matrix.platform.enabled }}
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.platform.name }}
          path: |
            target/${{ matrix.platform.target }}/release/oc-rsync
            target/${{ matrix.platform.target }}/release/oc-rsync.exe
          if-no-files-found: error

      - name: Upload oc-rsyncd artifact
        if: ${{ matrix.platform.enabled && matrix.platform.build_daemon }}
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsyncd-${{ matrix.platform.name }}
          path: |
            target/${{ matrix.platform.target }}/release/oc-rsyncd
            target/${{ matrix.platform.target }}/release/oc-rsyncd.exe
          if-no-files-found: error

