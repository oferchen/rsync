name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  lint:
    name: fmt + clippy (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check
      - run: cargo clippy --workspace --all-targets --all-features --no-deps

  test-linux:
    name: tests (Linux only)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Build (debug)
        run: cargo build --workspace --all-features
      - name: Unit tests
        run: cargo nextest run --workspace --all-features --no-capture

  interop-linux:
    name: interop smoke (Linux only)
    runs-on: ubuntu-latest
    needs: [test-linux]
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --release --bins
      - name: Install system rsync
        run: sudo apt-get update && sudo apt-get install -y rsync
      - name: oc-rsync → rsync.samba.org
        run: ./target/release/oc-rsync rsync://rsync.samba.org/
      - name: rsync (system) → oc-rsyncd (local)
        shell: bash
        run: |
          set -euo pipefail
          work="${RUNNER_TEMP}/interop"
          mkdir -p "${work}/module" "${work}/dst"
          printf "hello\n" > "${work}/module/hello.txt"
          cat > "${work}/oc-rsyncd.conf" <<'CONF'
          pid file = oc-rsyncd.pid
          use chroot = no
          [mod]
              path = REPLACE_PATH
              read only = false
          CONF
          sed -i "s#REPLACE_PATH#${work}/module#g" "${work}/oc-rsyncd.conf"
          ./target/release/oc-rsyncd --config "${work}/oc-rsyncd.conf" --port 8730 &
          srv_pid=$!
          trap "kill ${srv_pid} || true" EXIT
          sleep 1
          rsync rsync://127.0.0.1:8730/mod/hello.txt "${work}/dst/hello.txt"
          diff -u "${work}/module/hello.txt" "${work}/dst/hello.txt"

  build-all-platforms:
    # Build on all platforms, no tests.
    name: build ${{ matrix.target }}
    needs: [lint]  # compile may start once lint passes
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            enabled: true
            target: x86_64-unknown-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: false
            generate_sbom: true
          - name: linux-aarch64
            enabled: true
            target: aarch64-unknown-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: true
            generate_sbom: true
          - name: darwin-x86_64
            enabled: true
            target: x86_64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: darwin-aarch64
            enabled: true
            target: aarch64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: windows-x86_64
            enabled: true
            target: x86_64-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
          - name: windows-x86
            enabled: false
            target: i686-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
            # Kept in the matrix for future enablement once toolchains stabilise.
          - name: windows-aarch64
            enabled: false
            target: aarch64-pc-windows-msvc
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
            # Kept in the matrix for future enablement once toolchains stabilise.
    env:
      CC_aarch64_unknown_linux_gnu: ${{ matrix.platform.needs_cross_gcc && 'aarch64-linux-gnu-gcc' || '' }}
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.platform.needs_cross_gcc && 'aarch64-linux-gnu-gcc' || '' }}
    steps:
      - name: Skip disabled target
        if: ${{ !matrix.platform.enabled }}
        run: echo "Platform '${{ matrix.platform.name }}' is disabled for this release line."
      - uses: actions/checkout@v4
        if: ${{ matrix.platform.enabled }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        if: ${{ matrix.platform.enabled }}
        with:
          toolchain: 1.87
          components: rust-src
          targets: ${{ matrix.platform.target }}
          cache: true
      - name: Ensure target std is installed
        if: ${{ matrix.platform.enabled }}
        run: rustup target add ${{ matrix.platform.target }}
      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform.enabled }}
        with:
          shared-key: cross-${{ matrix.platform.name }}
          target: ${{ matrix.platform.target }}
      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: ${{ matrix.platform.enabled }}
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev rpm
          version: 1

      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: ${{ matrix.platform.enabled && matrix.platform.needs_cross_gcc }}
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1
      - name: Install Zig toolchain
        if: ${{ matrix.platform.enabled && matrix.platform.uses_zig }}
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild
        if: ${{ matrix.platform.enabled && matrix.platform.uses_zig }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild
      - name: Install cargo-cyclonedx
        if: ${{ matrix.platform.enabled && matrix.platform.generate_sbom }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx
      - name: Build oc-rsync
        if: ${{ matrix.platform.enabled }}
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsync
      - name: Build oc-rsyncd
        if: ${{ matrix.platform.enabled && matrix.platform.build_daemon }}
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsyncd
      - name: Generate target SBOM
        if: ${{ matrix.platform.enabled && matrix.platform.generate_sbom }}
        run: cargo --locked run -p xtask -- sbom --output target/${{ matrix.platform.target }}/release/oc-rsync-${{ matrix.platform.name }}-sbom.json
      - name: Upload oc-rsync artifact
        if: ${{ matrix.platform.enabled }}
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/oc-rsync*
          if-no-files-found: error
      - name: Upload oc-rsyncd artifact
        if: ${{ matrix.platform.enabled && matrix.platform.build_daemon }}
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsyncd-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/oc-rsyncd*
          if-no-files-found: error
