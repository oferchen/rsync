name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  LC_ALL: C
  LANG: C
  COLUMNS: 80

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: clippy,rustfmt
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: lint

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev rpm
          version: 1

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint with clippy
        run: cargo clippy --workspace --all-targets --all-features --locked -- -Dwarnings

      - name: Enforce line count limits
        run: cargo --locked run -p xtask -- enforce-limits

      - name: Build and validate documentation
        run: cargo --locked run -p xtask -- docs --validate

      - name: Ensure no placeholders remain
        run: cargo --locked run -p xtask -- no-placeholders

  cross-compile:
    needs: lint
    runs-on: ubuntu-latest
    name: Cross-compile (${{ matrix.platform.name }})
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        platform:
          - name: linux-x86_64
            enabled: true
            target: x86_64-generic-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: false
            generate_sbom: true
          - name: linux-aarch64
            enabled: true
            target: aarch64-generic-linux-gnu
            build_command: build
            build_daemon: true
            uses_zig: false
            needs_cross_gcc: true
            generate_sbom: true
          - name: darwin-x86_64
            enabled: true
            target: x86_64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: darwin-aarch64
            enabled: true
            target: aarch64-apple-darwin
            build_command: zigbuild
            build_daemon: true
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: true
          - name: windows-x86_64
            enabled: true
            target: x86_64-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
          - name: windows-x86
            enabled: false
            target: i686-pc-windows-gnu
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
            # Kept in the matrix for future enablement once toolchains stabilise.
          - name: windows-aarch64
            enabled: false
            target: aarch64-pc-windows-msvc
            build_command: zigbuild
            build_daemon: false
            uses_zig: true
            needs_cross_gcc: false
            generate_sbom: false
            # Kept in the matrix for future enablement once toolchains stabilise.
    env:
      CC_aarch64_unknown_linux_gnu: ${{ matrix.platform.needs_cross_gcc && 'aarch64-linux-gnu-gcc' || '' }}
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.platform.needs_cross_gcc && 'aarch64-linux-gnu-gcc' || '' }}
    steps:
      - name: Skip disabled target
        if: ${{ !matrix.platform.enabled }}
        run: echo "Platform '${{ matrix.platform.name }}' is disabled for this release line."

      - uses: actions/checkout@v4
        if: ${{ matrix.platform.enabled }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        if: ${{ matrix.platform.enabled }}
        with:
          toolchain: 1.87
          components: rust-src
          targets: ${{ matrix.platform.target }}
          cache: true

      - name: Ensure target std is installed
        if: ${{ matrix.platform.enabled }}
        run: rustup target add ${{ matrix.platform.target }}

      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform.enabled }}
        with:
          shared-key: cross-${{ matrix.platform.name }}
          target: ${{ matrix.platform.target }}

      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: ${{ matrix.platform.enabled }}
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev attr acl libxxhash-dev rpm
          version: 1

      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: ${{ matrix.platform.enabled && matrix.platform.needs_cross_gcc }}
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1

      - name: Install Zig toolchain
        if: ${{ matrix.platform.enabled && matrix.platform.uses_zig }}
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        if: ${{ matrix.platform.enabled && matrix.platform.uses_zig }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: Install cargo-cyclonedx
        if: ${{ matrix.platform.enabled && matrix.platform.generate_sbom }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Build oc-rsync
        if: ${{ matrix.platform.enabled }}
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsync

      - name: Build oc-rsyncd
        if: ${{ matrix.platform.enabled && matrix.platform.build_daemon }}
        run: cargo --locked ${{ matrix.platform.build_command }} --release --target ${{ matrix.platform.target }} --bin oc-rsyncd

      - name: Generate target SBOM
        if: ${{ matrix.platform.enabled && matrix.platform.generate_sbom }}
        run: cargo --locked run -p xtask -- sbom --output target/${{ matrix.platform.target }}/release/oc-rsync-${{ matrix.platform.name }}-sbom.json

      - name: Upload oc-rsync artifact
        if: ${{ matrix.platform.enabled }}
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/oc-rsync*
          if-no-files-found: error

      - name: Upload oc-rsyncd artifact
        if: ${{ matrix.platform.enabled && matrix.platform.build_daemon }}
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsyncd-${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/oc-rsyncd*
          if-no-files-found: error

  release:
    needs: [cross-compile]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: package-linux

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential libzstd-dev zlib1g-dev libacl1-dev rpm
          version: 1

      - name: Install cargo-deb
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deb

      - name: Install cargo-rpm
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-rpm

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Display workspace metadata
        run: cargo --locked run -p xtask -- branding

      - name: Build Debian, RPM, and amd64 tarball artifacts
        run: cargo --locked run -p xtask -- package

      - name: Generate SBOM
        run: cargo --locked run -p xtask -- sbom

      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-packages
          path: |
            target/release/oc-rsync*
            target/release/oc-rsyncd*
            target/debian/*.deb
            target/release/rpmbuild/RPMS/**/*.rpm
            target/dist/*.tar.gz
            target/sbom/oc-rsync.cdx.json
          if-no-files-found: error
          
