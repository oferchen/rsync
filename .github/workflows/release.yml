name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  LC_ALL: C
  LANG: C
  COLUMNS: 80

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.87
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libacl1-dev
      - name: Format
        run: cargo fmt --all --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Verify comments
        run: make verify-comments
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      - name: Install cargo-nextest
        run: cargo install cargo-nextest --locked
      - name: Test with coverage
        run: cargo llvm-cov nextest --workspace --all-features --fail-under-lines 99 -- --no-fail-fast
      - name: Validate interop matrix docs
        run: scripts/check-run-matrix-docs.sh
      - name: Cross-compile check
        run: |
          rustup target add x86_64-apple-darwin x86_64-pc-windows-msvc
          cargo check --workspace --target x86_64-apple-darwin
          cargo check --workspace --target x86_64-pc-windows-msvc

  build:
    needs: lint-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.87
          target: ${{ matrix.target }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libacl1-dev dpkg-dev rpm
      - name: Install aarch64 toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build release binaries
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            bins=("oc-rsync")
          else
            bins=("oc-rsync" "oc-rsyncd")
          fi

          for bin in "${bins[@]}"; do
            cargo build --release --target "${{ matrix.target }}" --bin "$bin"
          done
      - name: Package artifacts
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            bins=("oc-rsync")
            ext=".exe"
          else
            bins=("oc-rsync" "oc-rsyncd")
            ext=""
          fi

          base_dir="dist/${{ matrix.target }}"
          mkdir -p "$base_dir"

          declare -a outputs=()
          for bin in "${bins[@]}"; do
            src="target/${{ matrix.target }}/release/${bin}${ext}"
            dest="$base_dir/${bin}${ext}"
            cp "$src" "$dest"
            outputs+=("$dest")
          done

          python - <<'PY' "${outputs[@]}"
import hashlib
import pathlib
import sys

for arg in sys.argv[1:]:
    path = pathlib.Path(arg)
    digest = hashlib.sha256(path.read_bytes()).hexdigest()
    checksum_path = path.parent / f"{path.name}.sha256"
    checksum_path.write_text(f"{digest}  {path.name}\n")
PY

          cargo install cargo-sbom || true
          cargo sbom --output "$base_dir/oc-rsync-${{ matrix.target }}-sbom.json"
      - name: Build packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cargo install cargo-deb cargo-generate-rpm || true
          cargo deb --no-build --target ${{ matrix.target }}
          cargo generate-rpm --target ${{ matrix.target }}
          deb=$(find target/debian -name '*.deb' -print -quit)
          rpm=$(find target/generate-rpm -name '*.rpm' -print -quit)
          cp "$deb" dist/
          cp "$rpm" dist/
          sha256sum "dist/$(basename "$deb")" > "dist/$(basename "$deb").sha256"
          sha256sum "dist/$(basename "$rpm")" > "dist/$(basename "$rpm").sha256"
      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.target }}
          path: dist

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Bundle documentation
        run: |
          mkdir -p dist/docs
          cp man/oc-rsync.1 man/oc-rsyncd.8 man/oc-rsyncd.conf.5 dist/docs/
          cp packaging/examples/oc-rsyncd.conf dist/docs/
          tar -czf dist/oc-rsync-docs.tar.gz -C dist/docs .
          sha256sum dist/oc-rsync-docs.tar.gz > dist/oc-rsync-docs.tar.gz.sha256
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          
