name: Release

on:
  push:
    tags: [ "v*" ]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (static MUSL via zigbuild)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_zig: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_zig: true
          # macOS (native)
          - os: macos-13
            target: x86_64-apple-darwin
            use_zig: false
          - os: macos-14
            target: aarch64-apple-darwin
            use_zig: false
          # Windows (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_zig: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Install cargo-zigbuild (Linux-musl only)
        if: matrix.use_zig == true
        run: cargo install cargo-zigbuild --locked

      - name: Build (release)
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ matrix.use_zig }}" == "true" ]]; then
            cargo zigbuild --release --target "${{ matrix.target }}" --bins
          else
            cargo build --release --target "${{ matrix.target }}" --bins
          fi

      - name: Package tar.gz
        shell: bash
        run: |
          set -euo pipefail
          tag="${GITHUB_REF_NAME}"
          tgt="${{ matrix.target }}"
          out="oc-rsync-${tag}-${tgt}"
          root="dist/${out}"
          mkdir -p "${root}"

          case "${tgt}" in
            *windows*) bins=("oc-rsync.exe" "oc-rsyncd.exe");;
            *)         bins=("oc-rsync" "oc-rsyncd");;
          esac

          for b in "${bins[@]}"; do
            src="target/${tgt}/release/${b}"
            if [[ -f "${src}" ]]; then
              (strip "${src}" || true) 2>/dev/null || true
              cp -v "${src}" "${root}/"
            fi
          done

          for f in LICENSE README.md; do
            [[ -f "$f" ]] && cp -v "$f" "${root}/"
          done

          tar -C dist -czf "dist/${out}.tar.gz" "${out}"

          if command -v shasum >/dev/null 2>&1; then
            checksum_cmd=(shasum -a 256)
          else
            checksum_cmd=(sha256sum)
          fi

          checksum="$(${checksum_cmd[@]} "dist/${out}.tar.gz" | awk '{print $1}')"
          printf "%s  %s\n" "${checksum}" "${out}.tar.gz" > "dist/${out}.sha256"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            dist/*.tar.gz
            dist/*.sha256
          if-no-files-found: error
          retention-days: 7

  publish:
    name: publish release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist-agg

      - name: Gather & verify
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p upload
          while IFS= read -r -d '' tarball; do
            cp -v "${tarball}" upload/
          done < <(find dist-agg -type f -name '*.tar.gz' -print0)

          sha_files=()
          while IFS= read -r -d '' sha_file; do
            dest="upload/$(basename "${sha_file}")"
            cp -v "${sha_file}" "${dest}"
            sha_files+=("${dest}")
          done < <(find dist-agg -type f -name '*.sha256' -print0)

          if [[ ${#sha_files[@]} -eq 0 ]]; then
            echo "no checksum files were found in downloaded artifacts" >&2
            exit 1
          fi

          temp_file="$(mktemp)"
          trap 'rm -f "${temp_file}"' EXIT
          for sha in "${sha_files[@]}"; do
            cat "${sha}" >> "${temp_file}"
          done
          sort "${temp_file}" > upload/SHA256SUMS

          pushd upload >/dev/null
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 -c SHA256SUMS
          else
            sha256sum -c SHA256SUMS
          fi
          popd >/dev/null

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            upload/*.tar.gz
            upload/*.sha256
            upload/SHA256SUMS
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
